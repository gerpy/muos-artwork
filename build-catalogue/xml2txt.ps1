# Inspired from https://github.com/antiKk/muOS-Artwork/blob/main/Skraper%20Mixes/convert.ps1

# This script ingests an EmulationStation XML as generated by Skraper or ARRM
# and extract the Description for use with muOS
# The script runs in the same folder as a single gamelist.xml file and outputs
# txt description files in a folder named "text" as required by muOS
# The text folders will need to be moved manually or by ther means at the adequate place
# in the MuOS folder hierarchy

# Grab all XML files from current dir
$xmlFiles = Get-ChildItem -Path $PSScriptRoot -Filter gamelist.xml

#Create the output path
# This creates a "text" folder in the current directory
# Assumption : the script sits in the same folder as the gamelist.xml file

new-item "$PSScriptRoot/text" -ItemType Directory -Force
$outputFolderPath = "$PSScriptRoot/text"

# Open the XML file to get parsed
$xml = [xml] (Get-Content -raw "gamelist.xml")

# Loops over each game in the XML file
foreach ($gameElt in $xml.DocumentElement.game) {
	
	# Grabs basic information about the considered game 
	$gamePath = $gameElt.path
	$gameDesc = $gameElt.desc
	$gameGenre = $gameElt.genre
	$gameDeveloper = $gameElt.developer 
	$gamePublisher = $gameElt.publisher
	$gameSystem = $gameElt.arcadesystemname
	$gameDate = $gameElt.releasedate
	
	# Builds a content with more than just the description
	# (year, publisher, developer, arcade system if any, genre)
	# If a field is missing, the information gets skipped in the output txt file
	$content = ""
	
	if (![string]::IsNullOrEmpty($gameDate)) {
		$gameYear = $gameDate.Substring(0, [Math]::Min($gameDate.Length, 4))
		$gameYear = "YEAR : $gameYear"
		$content = "$content$gameYear`r`n"
	}
	
#	if (![string]::IsNullOrEmpty($gameSystem)) {
#		$gameSystem = $gameSystem.toUpper()
#		$gameSystem = "Arcade SYSTEM : $gameSystem"
#		$content = "$content$gameSystem`r`n"
#	}

	if (![string]::IsNullOrEmpty($gamePublisher)) {
		#$gamePublisher = $gamePublisher.toUpper()
		$gamePublisher = "Publisher (DEVELOPER) : $gamePublisher"
		$content = "$content$gamePublisher"
		if (![string]::IsNullOrEmpty($gameDeveloper)) {
			$gameDeveloper = $gameDeveloper.toUpper()
			$gameDeveloper = " ($gameDeveloper)"
			$content = "$content$gameDeveloper"
		}
		$content = "$content`r`n"
	}
	
	if (![string]::IsNullOrEmpty($gameGenre)) {
		#$gameGenre = $gameGenre.toUpper()
		$gameGenre = "GENRES : $gameGenre"
		$content = "$content$gameGenre`r`n"
	}

	if (![string]::IsNullOrEmpty($gameDesc)) {
		$content = "$content`r`n$gameDesc"
	}
	
	Write-Host "$content"
	
	# Stores the content in the right file in the "text" folder

	# Extracting filename from the path
	# This ensures the metadata get's the correct name
	$fileName = [System.IO.Path]::GetFileNameWithoutExtension($gamePath)

	# Create the files
	$outputFilePath = Join-Path -Path $outputFolderPath -ChildPath "$fileName.txt"

	# Create the directories if needed
	if (-not (Test-Path -LiteralPath $outputFolderPath)) {
		New-Item -ItemType Directory -Path $outputFolderPath | Out-Null
	}

	Write-Host "Writing $outputFilePath"
	Set-Content -LiteralPath $outputFilePath -Value $content
}